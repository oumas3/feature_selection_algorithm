{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10314891,"sourceType":"datasetVersion","datasetId":6385793}],"dockerImageVersionId":30822,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/oumaimaouay/feature-selection-algos-imp?scriptVersionId=215071579\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Dataset\n* source : (http://www.kaggle.com/competitions/titanic/data)\n * *test.csv* :The test dataset containing information about passengers whose survival status is unknown. It includes features such as PassengerId, Pclass, Sex, Age, etc., but does not include the Survived column. 28Kb\n * *train.csv* : The training dataset with passenger information and known survival outcomes. It includes the Survived column alongside other features like Name, Sex, Age, and Fare. 61Kb","metadata":{}},{"cell_type":"markdown","source":"> **Importing data and fetching first rows and number of features for our datasetImporting data and fetching first rows and number of features for our dataset**","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfile_path = '/kaggle/input/dataset-titanic/train.csv'\ndata = pd.read_csv(file_path)\nfeatures = data.columns.tolist() \ndata_values = data.values  \n\n# Display features and first few rows of data\nprint(\"Features:\", features, \"Count:\", len(features))\nprint(\"First rows of data:\\n\", data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T21:33:54.477095Z","iopub.execute_input":"2024-12-27T21:33:54.477435Z","iopub.status.idle":"2024-12-27T21:33:54.496876Z","shell.execute_reply.started":"2024-12-27T21:33:54.477407Z","shell.execute_reply":"2024-12-27T21:33:54.495693Z"}},"outputs":[{"name":"stdout","text":"Features: ['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'] Count: 12\nFirst rows of data:\n    PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \n","output_type":"stream"}],"execution_count":13},{"cell_type":"markdown","source":"**Dataset Features**\n* Pclass: Passenger class (1st, 2nd, 3rd)\n* Sex: Gender (Male, Female)\n* Age: Age of the passenger\n* SibSp: Number of siblings or spouses aboard\n* Parch: Number of parents or children aboard\n* Fare: Ticket fare\n* Embarked: Port of embarkation (C, Q, S)\nName, Ticket, Cabin , Passenger ID ","metadata":{}},{"cell_type":"markdown","source":"# Wrapper Method applying the algorithm of RFE Recursive Feature Elimination","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import RFE\n\n# Load the Titanic dataset\nfile_path = '/kaggle/input/dataset-titanic/train.csv'\ndata = pd.read_csv(file_path)\n# Preprocessing: Handle missing values and encode categorical features\ndata['Age'].fillna(data['Age'].median(), inplace=True)\ndata['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)\ndata['Sex'] = LabelEncoder().fit_transform(data['Sex'])\ndata['Embarked'] = LabelEncoder().fit_transform(data['Embarked'])\n\n# Features and target variable\nX = data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\ny = data['Survived']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Initialize Logistic Regression and RFE\nmodel = LogisticRegression(max_iter=200)\nrfe = RFE(model, n_features_to_select=5)\nrfe = rfe.fit(X_train, y_train)\n\n# Get selected features\nselected_features = X.columns[rfe.support_]\nprint(\"Selected Features using Wrapper Method (RFE):\", selected_features)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T21:51:44.947439Z","iopub.execute_input":"2024-12-27T21:51:44.94787Z","iopub.status.idle":"2024-12-27T21:51:45.008327Z","shell.execute_reply.started":"2024-12-27T21:51:44.94784Z","shell.execute_reply":"2024-12-27T21:51:45.007249Z"}},"outputs":[{"name":"stdout","text":"Selected Features using Wrapper Method (RFE): Index(['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked'], dtype='object')\n","output_type":"stream"}],"execution_count":20},{"cell_type":"markdown","source":"# Filter Method using Chi-Square for categorical features and ANOVA F-test for numerical features","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_selection import SelectKBest, chi2, f_classif\nfrom sklearn.preprocessing import StandardScaler\n\n# Apply scaling to numerical features\nX_scaled = StandardScaler().fit_transform(X[['Age', 'SibSp', 'Parch', 'Fare']])\n\n# Combine categorical and numerical features\nX_combined = pd.concat([pd.DataFrame(X_scaled, columns=['Age', 'SibSp', 'Parch', 'Fare']), X[['Pclass', 'Sex', 'Embarked']]], axis=1)\n\n# Apply Chi-Square for categorical features and ANOVA F-test for numerical features\nselector = SelectKBest(score_func=f_classif, k=5)  # For simplicity, use F-test for both\nselector.fit(X_combined, y)\n\n# Get selected features\nselected_features = X_combined.columns[selector.get_support()]\nprint(\"Selected Features using Filter Method:\", selected_features)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T21:54:58.560218Z","iopub.execute_input":"2024-12-27T21:54:58.560704Z","iopub.status.idle":"2024-12-27T21:54:58.579103Z","shell.execute_reply.started":"2024-12-27T21:54:58.560666Z","shell.execute_reply":"2024-12-27T21:54:58.577846Z"}},"outputs":[{"name":"stdout","text":"Selected Features using Filter Method: Index(['Parch', 'Fare', 'Pclass', 'Sex', 'Embarked'], dtype='object')\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"# Intrinsic Method using RandomForest Feature Importance","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\n# Fit a RandomForest model to get feature importance\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\n\n# Get feature importance scores\nfeature_importance = pd.Series(rf_model.feature_importances_, index=X.columns).sort_values(ascending=False)\n\n# Display top features\nprint(\"Feature Importance using Intrinsic Method (Random Forest):\")\nprint(feature_importance)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-27T21:52:00.083885Z","iopub.execute_input":"2024-12-27T21:52:00.084233Z","iopub.status.idle":"2024-12-27T21:52:00.488598Z","shell.execute_reply.started":"2024-12-27T21:52:00.084207Z","shell.execute_reply":"2024-12-27T21:52:00.487576Z"}},"outputs":[{"name":"stdout","text":"Feature Importance using Intrinsic Method (Random Forest):\nFare        0.268521\nSex         0.258681\nAge         0.251506\nPclass      0.088029\nSibSp       0.051472\nEmbarked    0.041324\nParch       0.040467\ndtype: float64\n","output_type":"stream"}],"execution_count":21}]}